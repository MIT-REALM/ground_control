#!/usr/bin/env python

from roslaunch2 import *
import os
# import abc

# currently mirrors launch structure of main repo, so some things may be a little weird?

class RGCGroup(Group):

    def __init__(
            self,
            ns,
            controller_name,
            controller_type,
            state_estimator_name,
            state_estimator_type,
            simulator_name,
            simulator_type,
            output,
            position_topic,
            control_topic,
            has_trajectory,
            draw_trajectory
    ):
        super(RGCGroup, self).__init__(ns)

        self.rgc_control = Package('rgc_control', True)
        self.rgc_simulator = Package('rgc_simulator', True)
        self.rgc_state_estimators = Package('rgc_state_estimators', True)

        self.controller_name = controller_name
        self.controller_type = controller_type

        self.state_estimator_name = state_estimator_name
        self.state_estimator_type = state_estimator_type
        self.state_estimate_topic = f"{self.state_estimator_name}/estimate"

        self.simulator_name = simulator_name
        self.simulator_type = simulator_type

        self.output = output

        self.position_topic = position_topic
        self.control_topic = control_topic

        self.has_trajectory = has_trajectory
        self.draw_trajectory = draw_trajectory

    def add_controller(self):
        raise NotImplementedError
    
    def add_state_estimator(self):
        raise NotImplementedError
    
    def add_simulator(self):
        raise NotImplementedError
    
    def add_all_nodes_to_launch(self, root, sim=False):
        self.add_controller()
        self.add_state_estimator()
        if sim:
            self.add_simulator()
        root.add(self)



class TurtlebotGroup(RGCGroup):

    def __init__(
            self,
            ns,

            controller_name="turtlebot_controller",
            controller_type="turtlebot_control.py",

            state_estimator_name="turtlebot_state_estimator",
            state_estimator_type="turtlebot_ekf.py",

            simulator_name="turtlebot_simulator",
            simulator_type="turtlebot_simulator.py",

            output=Output.Screen,

            has_trajectory=True,
            draw_trajectory=False,
            trajectory_base_path=None,
            trajectory_filename="non_ego_traj_0.eqx",

            position_topic="/vicon/realm_turtle_1/realm_turtle_1",
            control_topic="/turtle1/cmd_vel",

            T="12.0",
            randomize_trajectory="true",
            frame_name="realm_turtle1"
    ):
        super(TurtlebotGroup, self).__init__(
            ns,
            controller_name,
            controller_type,
            state_estimator_name,
            state_estimator_type,
            simulator_name,
            simulator_type,
            output,
            position_topic,
            control_topic
        )

        default_base_path = os.path.join(
            self.rgc_control.get_path(), "saved_policies/v1/base")
        if trajectory_base_path is None:
            trajectory_base_path = default_base_path
        
        self.base_path = trajectory_base_path
        self.filename = trajectory_filename

        self.T = T
        self.randomize_trajectory = randomize_trajectory
        self.frame_name = frame_name

    def add_controller(self):
        if self.rgc_control.has_node(self.controller_type, False):
            n = Node(pkg=self.rgc_control, 
                    node_type=self.controller_type,
                    name=self.controller_name,
                    output=self.output)
            
            n += FileParameter(param="trajectory/base_path", value=self.base_path)
            n += FileParameter(param="trajectory/filename", value=self.filename)
            n += FileParameter(param="state_estimate_topic", value=self.state_estimate_topic)
            n += FileParameter(param="randomize_trajectory", value=self.randomize_trajectory)
            n += FileParameter(param="T", value=self.T)

            self.add(n)

    def add_state_estimator(self):
        if self.rgc_state_estimators.has_node(self.state_estimator_type, False):
            n = Node(pkg=self.rgc_state_estimators, 
                    node_type=self.state_estimator_type,
                    name=self.state_estimator_name,
                    output=self.output)
            
            n += FileParameter(param="position_topic", value=self.position_topic)
            n += FileParameter(param="obs_noise_cov", value="0.1")
            n += FileParameter(param="process_noise_cov", value="0.1")

            self.add(n)

    def add_simulator(self):
        if self.rgc_simulator.has_node(self.simulator_type, False):
            n = Node(pkg=self.rgc_simulator,
                     node_type=self.simulator_type,
                     name=self.simulator_name,
                     output=self.output)

            n += FileParameter(param="position_topic", value=self.position_topic)
            n += FileParameter(param="control_topic", value=self.control_topic)
            n += FileParameter(param="frame_name", value=self.frame_name)

            self.add(n)



class ObstacleGroup(RGCGroup):

    def __init__(
            self,
            ns,

            state_estimator_name="obstacle_state_estimator",
            state_estimator_type="obstacle_maf.py",

            simulator_name="obstacle_simulator",
            simulator_type="obstacle_simulator.py",

            output=Output.Screen,

            position_topic="/vicon/realm_obstacle_0/realm_obstacle_0",
            frame_name=None,

            x_pos="0.0",
            y_pos="0.0",
            theta="0.0",
    ):
        super(ObstacleGroup, self).__init__(
            ns,
            None,
            None,
            state_estimator_name,
            state_estimator_type,
            simulator_name,
            simulator_type,
            output,
            position_topic,
            None,
            False,
            False
        )

        self.frame_name = ns if frame_name is None else frame_name
        self.x_pos = x_pos
        self.y_pos = y_pos
        self.theta = theta

        self.base_path = "NOTHING"
        self.filename = "NOTHING"


    def add_controller(self):
        return

    def add_state_estimator(self):
        if self.rgc_state_estimators.has_node(self.state_estimator_type, False):
            n = Node(pkg=self.rgc_state_estimators, 
                    node_type=self.state_estimator_type,
                    name=self.state_estimator_name,
                    output=self.output)
            
            n += FileParameter(param="position_topic", value=self.position_topic)

            self.add(n)

    def add_simulator(self):
        if self.rgc_simulator.has_node(self.simulator_type, False):
            n = Node(pkg=self.rgc_simulator,
                     node_type=self.simulator_type,
                     name=self.simulator_name,
                     output=self.output)

            n += FileParameter(param="position_topic", value=self.position_topic)
            n += FileParameter(param="frame_name", value=self.frame_name)
            n += FileParameter(param="x_pos", value=self.x_pos)
            n += FileParameter(param="y_pos", value=self.x_pos)
            n += FileParameter(param="theta", value=self.theta)

            self.add(n)



class F1TenthGroup(RGCGroup):

    def __init__(
            self, 
            ns="f1tenth",

            controller_name="f1tenth_controller",
            controller_type="f1tenth_control.py",

            state_estimator_name="f1tenth_state_estimator",
            state_estimator_type="f1tenth_ekf.py",

            simulator_name="f1tenth_simulator",
            simulator_type="f1tenth_simulator.py",

            output=Output.Screen,

            has_trajectory=True,
            draw_trajectory=False,
            trajectory_base_path=None,
            trajectory_filename="ego_traj_nominal_3.pkl",

            position_topic="/vicon/realm_f1tenth/realm_f1tenth",
            control_topic="/vesc/high_level/ackermann_cmd_mux/input/nav_0",

            T="12.0"
    ):
        super(F1TenthGroup, self).__init__(
            ns,
            controller_name,
            controller_type,
            state_estimator_name,
            state_estimator_type,
            simulator_name,
            simulator_type,
            output,
            position_topic,
            control_topic,
            has_trajectory,
            draw_trajectory
        )

        default_base_path = os.path.join(
            self.rgc_control.get_path(), "saved_policies/base")
        if trajectory_base_path is None:
            trajectory_base_path = default_base_path

        self.base_path=trajectory_base_path
        self.filename=trajectory_filename

        self.T = T

    def add_controller(self):
        if self.rgc_control.has_node(self.controller_type, False):
            n = Node(pkg=self.rgc_control, 
                    node_type=self.controller_type,
                    name=self.controller_name,
                    output=self.output)
            
            n += FileParameter(param="trajectory/base_path", value=self.base_path)
            n += FileParameter(param="trajectory/filename", value=self.filename)
            n += FileParameter(param="state_estimate_topic", value=self.state_estimate_topic)
            n += FileParameter(param="T", value=self.T)

            self.add(n)

    def add_state_estimator(self):
        if self.rgc_state_estimators.has_node(self.state_estimator_type, False):
            n = Node(pkg=self.rgc_state_estimators, 
                    node_type=self.state_estimator_type,
                    name=self.state_estimator_name,
                    output=self.output)
                        
            n += FileParameter(param="position_topic", value=self.position_topic)

            self.add(n)

    def add_simulator(self):
        if self.rgc_simulator.has_node(self.simulator_type, False):
            n = Node(pkg=self.rgc_simulator, 
                    node_type=self.simulator_type,
                    name=self.simulator_name,
                    output=self.output)
            
            n += FileParameter(param="position_topic", value=self.position_topic)
            n += FileParameter(param="control_topic", value=self.control_topic)
            n += FileParameter(param="base_path", value=self.base_path)
            n += FileParameter(param="filename", value=self.filename)

            self.add(n)


class VisualizerGroup(Group):

    def __init__(
            self,
            ns="visualizer",
            output=Output.Screen,
            groups={},
            draw_traj="false",

            x_min="-5.0",
            x_max="5.0",
            y_min="-5.0",
            y_max="5.0",
            grace="2.0",

            autosize="true"
    ):
        super(VisualizerGroup, self).__init__(ns)

        self.rgc_simulator = Package('rgc_simulator', True)

        self.visualizer_name = "simple_visualizer"
        self.visualizer_type = "simple_visualizer.py"

        self.output = output
        self.groups = groups
        self.draw_traj = draw_traj

        self.x_min = x_min
        self.x_max = x_max
        self.y_min = y_min
        self.y_max = y_max
        self.grace = grace
        self.autosize = autosize
    
    def add_visualizer(self):
        if self.rgc_simulator.has_node(self.visualizer_type, False):
            n = Node(pkg=self.rgc_simulator, 
                    node_type=self.visualizer_type,
                    name=self.visualizer_name,
                    output=self.output)
            
            n += FileParameter(param="x_min", value=self.x_min)
            n += FileParameter(param="x_max", value=self.x_max)
            n += FileParameter(param="y_min", value=self.y_min)
            n += FileParameter(param="y_max", value=self.y_max)
            n += FileParameter(param="grace", value=self.grace)
            n += FileParameter(param="autosize", value=self.autosize)
            
            # TODO: handle draw_traj stuff

            delimiter = "__DELIMITER__" # can't use this in topics or labels
            
            position_topics = []
            position_labels = []
            draw_traj = []
            base_paths = []
            filenames = []
            
            for label, group in self.groups.items():
                print(label, group)
                position_labels.append(label)
                position_topics.append(group.position_topic)
                draw_traj.append(str(group.draw_trajectory and group.has_trajectory))
                base_paths.append(group.base_path)
                filenames.append(group.filename)

            position_labels_str = delimiter.join(position_labels)
            position_topics_str = delimiter.join(position_topics)
            draw_traj_str = delimiter.join(draw_traj)
            base_paths_str = delimiter.join(base_paths)
            filenames_str = delimiter.join(filenames)

            n += FileParameter(param="delimiter", value=delimiter)
            n += FileParameter(param="position_labels", value=position_labels_str)
            n += FileParameter(param="position_topics", value=position_topics_str)
            n += FileParameter(param="draw_traj", value=draw_traj_str)
            n += FileParameter(param="base_paths", value=base_paths_str)
            n += FileParameter(param="filenames", value=filenames_str)

            # print(position_labels)

            # n += FileParameter(param="position_labels", value=position_labels)
            # n += FileParameter(param="position_topics", value=position_topics)

            self.add(n)

    def add_all_nodes_to_launch(self, root):
        self.add_visualizer()
        root.add(self)



class RGCLaunch(Launch):

    def __init__(self):
        super(RGCLaunch, self).__init__()



def main(**kwargs):  # contains the entire code to launch

    sim = True
    viz = True

    root = RGCLaunch()

    # important parameters for f1tenth are mainly:
    # -> controller_type
    # -> position_topic, control_topic (if not default)
    # -> trajectory_filename (if applicable)

    f1tenth = F1TenthGroup(
        controller_type="f1tenth_control_ral.py",
        trajectory_filename="ego_traj_nominal_3.pkl",
        draw_trajectory=True)
    f1tenth.add_all_nodes_to_launch(root, sim)

    # turtle1 = TurtlebotGroup("turtle1")
    # turtle1.add_all_nodes_to_launch(root, sim)

    # important parameters for obstacles are mainly:
    # -> ns (namespace)
    # -> position_topic
    # -> x_pos, y_pos (only needed for sim)
    
    obstacle1 = ObstacleGroup(
        ns="obstacle_1",
        position_topic="/vicon/realm_obstacle_1/realm_obstacle_1",
        x_pos="2.0",
        y_pos="1.0")
    obstacle1.add_all_nodes_to_launch(root, sim)

    obstacle2 = ObstacleGroup(
        ns="obstacle_2",
        position_topic="/vicon/realm_obstacle_2/realm_obstacle_2",
        x_pos="-1.0",
        y_pos="-2.0")
    obstacle2.add_all_nodes_to_launch(root, sim)

    # set up groups and labels for visualization

    groups = {
        "f1/10": f1tenth, 
        "obs1": obstacle1,
        "obs2": obstacle2
    }

    if viz:
        visualizer = VisualizerGroup(
            groups=groups,
            autosize="false")
        visualizer.add_all_nodes_to_launch(root)

    return root